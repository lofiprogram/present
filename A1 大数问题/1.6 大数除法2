大数除法

在大数里我们已经不能用常规方法去计算了。

需要将除法思想转变为减法思想。
例如计算：7/2=3余1。
减法思想计算为：7/2 → 7-2-2-2=1，即得到7/2=3余1。

再例如计算550/24：
550-24-24-24-....-24=22，一共减了22次24，最后余22。

并不是机械操作，参照以下操作步骤：

    550
   -24
    310
   -24
     70
    -24
     46
    -24
     22
     
减了4次24，百位数字减两次，十位数字减两次，最后余22。
只需要使被除数与除数位数相同，然后相减就可以了。
例如：550-240-240-24-24=22。

位数不同时在除数后面补0。
例如：53-8，要用5-8，先补位，变成53-80。
因为倒置了，即35-08。
最后计算过后得到的结果是商为06，余数为05，去除前缀0 ，就得到最终结果了。

理解了上面的思路，现在来详细的分析一下大数除法的实现过程：

1
定义两个字符串来存储大数。
计算两个大数的位数。
另外还需要两个数组来存放转化为数字之后的被除数，除数。
再定义两个数组来存储商和余数。

2
我们就要判断利用位数的大小来判断被除数和除数的大小。
如果len1<len2，显然被除数小于除数，就可以直接得出结果了。
如果被除数的位数大于或者等于除数的位数，就无法直接判断大小了，需要进行计算。
先将除数后补0，将两个大数位数相同。
注意如何补0，我们一开始存的是x[0]=3;x[1]=5;y[0]=8;需要在在8的前面补0。

3
开始进入计算过程。
首先初始化表示商的数组z[ ]。
然后判断两个数之间的关系以及位数与除数位数的关系。
满足条件，进行减法运算。
若不满足条件，将除数位数减1，即去0，循环直到得出结果。

4
对得到的结果进行去除前缀0操作，输出结果。


代码实现参考1.6 1.cpp。


/*
https://blog.csdn.net/ysz171360154/article/details/88956342
*/

